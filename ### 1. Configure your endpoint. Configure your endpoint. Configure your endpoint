### 1. Configure your endpoint

Ensure you have a dedicated HTTPS endpoint ready to receive POST requests with a JSON body.

```
import express from 'express'; import crypto from 'crypto'; const app = express(); // Define your webhook handling function async function handleWebhook(req: express.Request, res: express.Response) { const LOMI_WEBHOOK_SECRET = process.env.LOMI_WEBHOOK_SECRET; if (!LOMI_WEBHOOK_SECRET) { console.error('Webhook secret is not configured.'); return res.status(500).send('Webhook configuration error'); } // Verify signature (implementation below) const signature = req.headers['x-lomi-signature'] as string; if (!signature || !verifySignature(req.body, signature, LOMI_WEBHOOK_SECRET)) { return res.status(400).send('Invalid signature'); } // Respond quickly to acknowledge receipt res.status(200).json({ received: true }); // Process the event asynchronously const event = JSON.parse(req.body.toString()); try { await processWebhookEvent(event); } catch (error) { console.error('Error processing webhook event:', error); // Log the error, but don't fail the response to lomi. } } // Use express.raw() middleware to access the raw body for signature verification app.post('/your-webhook-endpoint', express.raw({ type: 'application/json' }), handleWebhook ); // Your signature verification function (see below) function verifySignature(payload: Buffer, signature: string, secret: string): boolean { // ... implementation ... return true; // Placeholder } // Your event processing logic async function processWebhookEvent(event: any): Promise<void> { console.log(`Processing event: ${event.id}, Type: ${event.event}`); // Add your business logic here based on event.event } // Start the server...
```


```
import express from 'express'; import crypto from 'crypto'; const app = express(); // Define your webhook handling function async function handleWebhook(req: express.Request, res: express.Response) { const LOMI_WEBHOOK_SECRET = process.env.LOMI_WEBHOOK_SECRET; if (!LOMI_WEBHOOK_SECRET) { console.error('Webhook secret is not configured.'); return res.status(500).send('Webhook configuration error'); } // Verify signature (implementation below) const signature = req.headers['x-lomi-signature'] as string; if (!signature || !verifySignature(req.body, signature, LOMI_WEBHOOK_SECRET)) { return res.status(400).send('Invalid signature'); } // Respond quickly to acknowledge receipt res.status(200).json({ received: true }); // Process the event asynchronously const event = JSON.parse(req.body.toString()); try { await processWebhookEvent(event); } catch (error) { console.error('Error processing webhook event:', error); // Log the error, but don't fail the response to lomi. } } // Use express.raw() middleware to access the raw body for signature verification app.post('/your-webhook-endpoint', express.raw({ type: 'application/json' }), handleWebhook ); // Your signature verification function (see below) function verifySignature(payload: Buffer, signature: string, secret: string): boolean { // ... implementation ... return true; // Placeholder } // Your event processing logic async function processWebhookEvent(event: any): Promise<void> { console.log(`Processing event: ${event.id}, Type: ${event.event}`); // Add your business logic here based on event.event } // Start the server...
```